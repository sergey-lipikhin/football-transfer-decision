//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PlayerService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PlayerService.IPlayerService")]
    public interface IPlayerService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/ReadClubsNames", ReplyAction="http://tempuri.org/IPlayerService/ReadClubsNamesResponse")]
        System.Threading.Tasks.Task<string[]> ReadClubsNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/ReadNationalities", ReplyAction="http://tempuri.org/IPlayerService/ReadNationalitiesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> ReadNationalitiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/ReadPlayers", ReplyAction="http://tempuri.org/IPlayerService/ReadPlayersResponse")]
        System.Threading.Tasks.Task<System.ValueTuple<int, string, int, string, string, string, string, System.ValueTuple<double>>[]> ReadPlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/UpdatePlayer", ReplyAction="http://tempuri.org/IPlayerService/UpdatePlayerResponse")]
        System.Threading.Tasks.Task<bool> UpdatePlayerAsync(int id, string name, int age, string nationality, string club, string position, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/ReadRating", ReplyAction="http://tempuri.org/IPlayerService/ReadRatingResponse")]
        System.Threading.Tasks.Task<double[]> ReadRatingAsync(int userId, int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/UpdateInsertRating", ReplyAction="http://tempuri.org/IPlayerService/UpdateInsertRatingResponse")]
        System.Threading.Tasks.Task<bool> UpdateInsertRatingAsync(int userId, int playerId, double[] rating);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/Predict", ReplyAction="http://tempuri.org/IPlayerService/PredictResponse")]
        System.Threading.Tasks.Task<double> PredictAsync(double[] x_predict);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface IPlayerServiceChannel : PlayerService.IPlayerService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class PlayerServiceClient : System.ServiceModel.ClientBase<PlayerService.IPlayerService>, PlayerService.IPlayerService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public PlayerServiceClient() : 
                base(PlayerServiceClient.GetDefaultBinding(), PlayerServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_IPlayerService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PlayerServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(PlayerServiceClient.GetBindingForEndpoint(endpointConfiguration), PlayerServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PlayerServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(PlayerServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PlayerServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(PlayerServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PlayerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string[]> ReadClubsNamesAsync()
        {
            return base.Channel.ReadClubsNamesAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> ReadNationalitiesAsync()
        {
            return base.Channel.ReadNationalitiesAsync();
        }
        
        public System.Threading.Tasks.Task<System.ValueTuple<int, string, int, string, string, string, string, System.ValueTuple<double>>[]> ReadPlayersAsync()
        {
            return base.Channel.ReadPlayersAsync();
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePlayerAsync(int id, string name, int age, string nationality, string club, string position, string status)
        {
            return base.Channel.UpdatePlayerAsync(id, name, age, nationality, club, position, status);
        }
        
        public System.Threading.Tasks.Task<double[]> ReadRatingAsync(int userId, int playerId)
        {
            return base.Channel.ReadRatingAsync(userId, playerId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateInsertRatingAsync(int userId, int playerId, double[] rating)
        {
            return base.Channel.UpdateInsertRatingAsync(userId, playerId, rating);
        }
        
        public System.Threading.Tasks.Task<double> PredictAsync(double[] x_predict)
        {
            return base.Channel.PredictAsync(x_predict);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IPlayerService))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IPlayerService))
            {
                return new System.ServiceModel.EndpointAddress("net.tcp://localhost:8302/");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return PlayerServiceClient.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_IPlayerService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return PlayerServiceClient.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_IPlayerService);
        }
        
        public enum EndpointConfiguration
        {
            
            NetTcpBinding_IPlayerService,
        }
    }
}
