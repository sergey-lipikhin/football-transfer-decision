using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace Model
{
    public class NeuralNetwork
    {
        private static System.Diagnostics.ProcessStartInfo start = new System.Diagnostics.ProcessStartInfo();

        private static string exe_filename = @"C:\Users\Sergey\AppData\Local\Programs\Python\Python311\python.exe";
        private static string script_filename = @"..\..\..\..\transfer-market-model\finalpredict.py";

        public NeuralNetwork()
        {
            //python interprater location
            start.FileName = exe_filename;
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            start.LoadUserProfile = true;
        }

        public double Predict(List<double> x_predict)
        {
            string x_predict_string = string.Join(" ", x_predict).Replace(",", ".").Replace(" ", ",");

            // pass arguments to.py
            start.Arguments = string.Format("{0} {1}", script_filename, x_predict_string);

            using (System.Diagnostics.Process process = System.Diagnostics.Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from Python script
                    string result = reader.ReadToEnd(); // Here is the result of StdOut

                    double r = 0.0;
                    try
                    {
                        r = double.Parse(result, System.Globalization.CultureInfo.InvariantCulture);
                    }
                    catch { }

                    return r;
                }
            }
        }
    }
}
